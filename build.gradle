plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.78'
    id 'org.moddedmc.wiki.toolkit' version '0.2.5'
}

wiki {
    docs {
        pmmo { root = file('wiki/docs')}
    }
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = "${minecraft_version}-${mod_version}"
group = mod_group_id

repositories {
    mavenLocal()
    maven { url "https://maven.blamejared.com" }
    maven {
        url 'https://cursemaven.com'
        content { includeGroup 'curse.maven' }
    }
}

//configurations {
//    junitImplementation.extendsFrom(implementation)
//}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
//    implementation "net.neoforged:neoforge:${neo_version}"
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
//    implementation "net.neoforged:testframework:21.0.6-beta"
//    junitImplementation "org.junit.jupiter:junit-jupiter-params"
    //junitRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

//    junitImplementation("org.assertj:assertj-core:3.25.1")
//    junitImplementation "net.neoforged.fancymodloader:junit-fml:${loader_version}"
    //annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    //CT Processors
//    annotationProcessor 'com.blamejared.crafttweaker:Crafttweaker_Annotation_Processors:3.0.0.16'
//    annotationProcessor "net.neoforged:neoforge:${minecraft_version}-${neo_version}"
//    annotationProcessor "com.blamejared.crafttweaker:CraftTweaker-neoforge-${minecraft_version}:${ct_version}"

    //compileOnly fg.deobf("mezz.jei:jei-1.18.2:9.7.0.195:api")
    compileOnly "curse.maven:ftbq-${projectid_ftbq}:${version_ftbq}"
    compileOnly "curse.maven:ftbt-${projectid_ftbt}:${version_ftbt}"
    compileOnly "curse.maven:ftbl-${projectid_ftbl}:${version_ftbl}"
    //compileOnly fg.deobf("curse.maven:ftbf-${projectid_ftbf}:${version_ftbf}")
    compileOnly "curse.maven:arch-${projectid_arch}:${version_arch}"
    compileOnly "com.blamejared.crafttweaker:CraftTweaker-neoforge-${minecraft_version}:${ct_version}"
    compileOnly "curse.maven:curios-${projectid_curios}:${version_curios}"

    //runtimeOnly fg.deobf("mezz.jei:jei-1.18.2:9.7.0.195")
    //runtimeOnly "curse.maven:ftbq-${projectid_ftbq}:${version_ftbq}"
    //runtimeOnly "curse.maven:ftbt-${projectid_ftbt}:${version_ftbt}"
    //runtimeOnly "curse.maven:ftbl-${projectid_ftbl}:${version_ftbl}"
    //runtimeOnly fg.deobf("curse.maven:ftbf-${projectid_ftbf}:${version_ftbf}")
    //runtimeOnly "curse.maven:arch-${projectid_arch}:${version_arch}"
    //runtimeOnly "com.blamejared.crafttweaker:CraftTweaker-neoforge-${minecraft_version}:${ct_version}"
    //runtimeOnly "curse.maven:curios-${projectid_curios}:${version_curios}"
    //runtimeOnly fg.deobf('curse.maven:aquaculture-60028:4074684')
    //runtimeOnly fg.deobf('curse.maven:twilight-227639:4337394')
    //runtimeOnly fg.deobf('curse.maven:travelersbackpack-321117:4595935')
    //runtimeOnly fg.deobf('curse.maven:mmmmmmm-225738:4816636')
    //runtimeOnly fg.deobf('curse.maven:mmmdep-499980:4806893s')
    //runtimeOnly fg.deobf('curse.maven:pst-850298:4745035')
    //runtimeOnly fg.deobf('curse.maven:attributefix-280510:4844658')
    //runtimeOnly fg.deobf('curse.maven:maxhealthfix-492246:4714765')
    //runtimeOnly 'curse.maven:sophback-422301:5621986'
    //runtimeOnly 'curse.maven:sophcore-618298:5621984'
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            pack_format_number     : pack_format_number
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

test {
    useJUnitPlatform()
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
//idea {
//    module {
//        downloadSources = true
//        downloadJavadoc = true
//    }
//}